resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true
  tags = {
    Name = "Main-VPC"
  }
}

# Updated Subnet A (Private Subnet)
resource "aws_subnet" "subnet_a" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.subnet_a_cidr
  availability_zone       = var.az_a
  map_public_ip_on_launch = false  # Private subnet (No public IPs)
  tags = {
    Name = "Subnet-A"
  }
}

# Updated Subnet B (Private Subnet)
resource "aws_subnet" "subnet_b" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.subnet_b_cidr
  availability_zone       = var.az_b
  map_public_ip_on_launch = false  # Private subnet (No public IPs)
  tags = {
    Name = "Subnet-B"
  }
}

# Internet Gateway (for public traffic)
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = "Main-IGW"
  }
}

# Elastic IP for the NAT Gateway
resource "aws_eip" "nat" {
#  vpc    = true  # Ensures the EIP is created for VPC-specific usage
  domain = "vpc" # Associate the EIP with the VPC domain
}

# NAT Gateway in Public Subnet
resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat.id
  subnet_id     = aws_subnet.subnet_a.id  # NAT Gateway should be in a Public Subnet
  tags = {
    Name = "Main-NAT"
  }
}

# Route Table for Private Subnet A
resource "aws_route_table" "private_a" {
  vpc_id = aws_vpc.main.id
}

# Route to allow traffic from Private Subnet A to NAT Gateway
resource "aws_route" "private_a_nat" {
  route_table_id         = aws_route_table.private_a.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat.id
}

# Associate Private Subnet A with the route table
resource "aws_route_table_association" "private_a_association" {
  subnet_id      = aws_subnet.subnet_a.id
  route_table_id = aws_route_table.private_a.id
}

# Route Table for Private Subnet B
resource "aws_route_table" "private_b" {
  vpc_id = aws_vpc.main.id
}

# Route to allow traffic from Private Subnet B to NAT Gateway
resource "aws_route" "private_b_nat" {
  route_table_id         = aws_route_table.private_b.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat.id
}

# Associate Private Subnet B with the route table
resource "aws_route_table_association" "private_b_association" {
  subnet_id      = aws_subnet.subnet_b.id
  route_table_id = aws_route_table.private_b.id
}

# Output the Subnet IDs for use in other modules (e.g., EKS)
output "subnet_ids" {
  value = [aws_subnet.subnet_a.id, aws_subnet.subnet_b.id]
}

# Output the Private Subnet IDs (for EKS/Fargate usage)
output "private_subnet_ids" {
  value = [
    aws_subnet.subnet_a.id,
    aws_subnet.subnet_b.id
  ]
}

